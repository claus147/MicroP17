


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         ;R1 : Generator stored here
    3 00000000         ;R2 : The data to test (backwards)
    4 00000000         ;R3 : single ASCII char to be manipulated
    5 00000000         ;R4 : scratch register, decremented at every single char
                        taken in
    6 00000000         ;R5 : scratch register, to check if xor with generator s
                       hould be performed or not
    7 00000000         ;R6 : scratch register, counter for end of single char m
                       anipulation loop
    8 00000000         ;R7 : scratch register, to check for end of single char 
                       manipulation loop
    9 00000000         
   10 00000000                 AREA             text, CODE, READONLY
   11 00000000                 EXPORT           lab1code
   12 00000000         lab1code
   13 00000000         ;first push all registers to use onto stack
   14 00000000 B4FE            PUSH             {R1-R7}
   15 00000002         
   16 00000002 F248 4108       LDR              R1, =0x8408 ;putting generator 
                                                            into R1
   17 00000006 4A0E            LDR              R2, =0x34313032 ;putting 4102 i
                                                            nto R2
   18 00000008 F04F 0404       MOV              R4, #4      ;length of the stri
                                                            ng to do crc
   19 0000000C         
   20 0000000C         nextchar
   21 0000000C B1AC            CBZ              R4, toend   ;check to see if la
                                                            st char
   22 0000000E F1A4 0401       SUB              R4, R4, #1  ;decrement number o
                                                            f chars to use
   23 00000012 F002 08FF       AND              R8, R2, #0xFF ;take the first 8
                                                             bits to be manipul
                                                            ated (lsb)
   24 00000016 EA88 0303       EOR              R3, R8, R3
   25 0000001A EA4F 2212       LSR              R2, R2, #8  ;shift the number r
                                                            ight for prep to ta
                                                            ke in next number
   26 0000001E F04F 0608       MOV              R6, #8      ;have a counter to 
                                                            count down from 8 t
                                                            o 0
   27 00000022         singlecharcompare
   28 00000022 F003 0501       AND              R5, R3, #0x1 ;check if last bit
                                                             is a 1
   29 00000026 EA4F 0353       LSR              R3, R3, #1  ;regardless if last
                                                             bit is 1 we shift 
                                                            right
   30 0000002A B10D            CBZ              R5, nocompare ;compare and bran
                                                            ch if 0
   31 0000002C         compare
   32 0000002C EA83 0301       EOR              R3, R3, R1  ;xor what we have w
                                                            ith generator
   33 00000030         nocompare
   34 00000030 F1A6 0601       SUB              R6, R6, #1  ;decrement counter
   35 00000034         ;SUB R7, R6, #8  ;check if 8th time (end of ASCII char)
   36 00000034 2E00            CMP              R6, #0
   37 00000036 D0E9            BEQ              nextchar
   38 00000038         ;CBZ R7, nextchar ;bring the next ASCII char in 
   39 00000038 E7F3            B                singlecharcompare ;if not time 



ARM Macro Assembler    Page 2 


                                                            to bring the next c
                                                            har in keep going
   40 0000003A         toend
   41 0000003A BCF6            POP              {R1,R2,R4-R7} ;cleanup, not R3 
                                                            
   42 0000003C 4770            BX               LR          ;
   43 0000003E                 END
              00 00 34313032 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\obj
ect\lab1code.d -o.\object\lab1code.o -I"C:\Users\Claus\Documents\!McGill\!Fall 
2014\ECSE 426\MicroP17\Lab 1 Base Project\RTE" -I"C:\Users\Claus\Documents\!McG
ill\!Fall 2014\ECSE 426\MicroP17\Lab 1 Base Project\RTE\Device\STM32F407VG" -IC
:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM
32F4xx_DFP\1.0.8\Device\Include --predefine="__EVAL SETA 1" --predefine="__MICR
OLIB SETA 1" --list=.\listings\lab1code.lst lab1code.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

compare 0000002C

Symbol: compare
   Definitions
      At line 31 in file lab1code.s
   Uses
      None
Comment: compare unused
lab1code 00000000

Symbol: lab1code
   Definitions
      At line 12 in file lab1code.s
   Uses
      At line 11 in file lab1code.s
Comment: lab1code used once
nextchar 0000000C

Symbol: nextchar
   Definitions
      At line 20 in file lab1code.s
   Uses
      At line 37 in file lab1code.s
Comment: nextchar used once
nocompare 00000030

Symbol: nocompare
   Definitions
      At line 33 in file lab1code.s
   Uses
      At line 30 in file lab1code.s
Comment: nocompare used once
singlecharcompare 00000022

Symbol: singlecharcompare
   Definitions
      At line 27 in file lab1code.s
   Uses
      At line 39 in file lab1code.s
Comment: singlecharcompare used once
text 00000000

Symbol: text
   Definitions
      At line 10 in file lab1code.s
   Uses
      None
Comment: text unused
toend 0000003A

Symbol: toend
   Definitions
      At line 40 in file lab1code.s
   Uses
      At line 21 in file lab1code.s
Comment: toend used once
7 symbols
342 symbols in table
